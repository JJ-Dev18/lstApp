name: Deploy to VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      run_migrations:
        description: 'Run database migrations'
        required: false
        default: 'false'
      deploy_target:
        description: 'Deploy target (frontend, backend, or both)'
        required: true
        default: 'both'

jobs:
  clean-up:
    runs-on: ubuntu-latest
    steps:
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Clean up old backend containers and networks
      if: contains(github.event.head_commit.message, '[backend]') || contains(github.event.head_commit.message, '[both]') || github.event.inputs.deploy_target == 'backend' || github.event.inputs.deploy_target == 'both'
      env:
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_HOST: ${{ secrets.VPS_HOST }}
      run: |
        ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} << 'EOF'
        cd /var/www/lstapp
        docker-compose stop backend
        docker-compose rm -f backend
        EOF

    - name: Clean up old frontend containers and networks
      if: contains(github.event.head_commit.message, '[frontend]') || contains(github.event.head_commit.message, '[both]') || github.event.inputs.deploy_target == 'frontend' || github.event.inputs.deploy_target == 'both'
      env:
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_HOST: ${{ secrets.VPS_HOST }}
      run: |
        ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} << 'EOF'
        cd /var/www/lstapp
        docker-compose stop frontend
        docker-compose rm -f frontend
        EOF

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: clean-up
    if: contains(github.event.head_commit.message, '[frontend]') || contains(github.event.head_commit.message, '[both]') || github.event.inputs.deploy_target == 'frontend' || github.event.inputs.deploy_target == 'both'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Copy frontend files to VPS
      env:
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_HOST: ${{ secrets.VPS_HOST }}
      run: |
        ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} "mkdir -p /var/www/lstapp/frontend"
        scp -o StrictHostKeyChecking=no -r ./frontend/* ${VPS_USER}@${VPS_HOST}:/var/www/lstapp/frontend/
      
    - name: Copy docker-compose.yml to VPS
      env:
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_HOST: ${{ secrets.VPS_HOST }}
      run: |
        scp -o StrictHostKeyChecking=no ./docker-compose.yml ${VPS_USER}@${VPS_HOST}:/var/www/lstapp/docker-compose.yml

    - name: Build frontend on VPS
      env:
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_HOST: ${{ secrets.VPS_HOST }}
      run: |
        ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} << 'EOF'
        cd /var/www/lstapp
        docker-compose build frontend
        EOF

    - name: Deploy frontend on VPS
      env:
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_HOST: ${{ secrets.VPS_HOST }}
      run: |
        ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} << 'EOF'
        cd /var/www/lstapp
        docker-compose up -d frontend
        EOF

  deploy-backend:
    runs-on: ubuntu-latest
    needs: clean-up
    if: contains(github.event.head_commit.message, '[backend]') || contains(github.event.head_commit.message, '[both]') || github.event.inputs.deploy_target == 'backend' || github.event.inputs.deploy_target == 'both'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Copy backend files to VPS
      env:
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_HOST: ${{ secrets.VPS_HOST }}
      run: |
        ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} "mkdir -p /var/www/lstapp/backend"
        scp -o StrictHostKeyChecking=no -r ./backend/* ${VPS_USER}@${VPS_HOST}:/var/www/lstapp/backend/
      
    - name: Copy docker-compose.yml to VPS
      env:
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_HOST: ${{ secrets.VPS_HOST }}
      run: |
        scp -o StrictHostKeyChecking=no ./docker-compose.yml ${VPS_USER}@${VPS_HOST}:/var/www/lstapp/docker-compose.yml

    - name: Build backend on VPS
      env:
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_HOST: ${{ secrets.VPS_HOST }}
      run: |
        ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} << 'EOF'
        cd /var/www/lstapp
        docker-compose build backend
        EOF

    - name: Deploy backend on VPS
      env:
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_HOST: ${{ secrets.VPS_HOST }}
      run: |
        ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} << 'EOF'
        cd /var/www/lstapp
        docker-compose up -d backend
        EOF

    - name: Run migrations
      if: contains(github.event.head_commit.message, '[migrate]') || github.event.inputs.run_migrations == 'true'
      env:
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_HOST: ${{ secrets.VPS_HOST }}
      run: |
        ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} << 'EOF'
        cd /var/www/lstapp
        docker-compose exec backend npm run migrate
        EOF

    - name: Run seeds
      if: contains(github.event.head_commit.message, '[seeds]') || github.event.inputs.run_migrations == 'true'
      env:
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_HOST: ${{ secrets.VPS_HOST }}
      run: |
        ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} << 'EOF'
        cd /var/www/lstapp
        docker-compose exec backend npm run seeds
        EOF